[{"body":"This section presents automatically generated documentation for the project’s API\n","categories":"","description":"","excerpt":"This section presents automatically generated documentation for the …","ref":"/ODW-docs/api/","tags":"","title":"API"},{"body":"This page is basically a recap of what would be a user-guide on how to use ODW to generate documentation sites for your own OpenFOAM projects. It’s recommended that you follow the example structure too.\nWhat is ODW? ODW is a Hugo module with a special focus on generating API docs for OpenFOAM libraries in an “unattended” manner.\nThe Hugo static site generator builds HTML docs from Markdown files. FoamCD parses and generates Markdown documentation for the OpenFOAM libraries (or any other C++ libs) users point to. This allows to host such websites at no cost on multiple platforms (Github Pages being our main target) and the generation of the docs can be just another step in the user’s CI/CD workflow!\nThe promise is that users will only have to write the docs in Markdown syntax, and they get automatically-generated API and unit testing documentation updates as their code changes. Having the documentation in Markdown format also makes it re-usable in a couple of other places.\nOne common issue with the API documentation is reflecting certain code entity states, like deprecation. ODW takes great care to expose this information to API users in a meaningful way. For example, deprecations are detected through both in-line comments and compiler attributes, and the respective entities are flagged as such! Why would I want to use ODW? What is it good for?: Low-friction, extensive, documentation written in Markdown for OpenFOAM libraries.\nWhat is it not good for?:\nEven though this is mainly an API documentation tool, it doesn’t try to replace good IDE setup;\nusers are not expected to consult the API docs so they can find functions or classes. What we strive for here, is: to provide a comprehensive understanding of the language features used, hence the focus on C++ and DSL features in API docs. to provide an opportunity for contextual learning, hence the focus on exposing DSL features that wouldn’t be recognized by an IDE. to provide a way to flatten the learning curve for new developers, hence the support for ADRs, unit tests and blogs. The OpenFOAM build system (wmake) is heavily relied on, so PRs would be needed to switch/support other build systems. If your idea of documentation doesn’t confine to “simple Markdown pages”, this is probably not for you. What is it not yet good for?: There is a ROADMAP that details not-yet-supported features.\nWhere should I go next? We have prepared a check-list for you to go through if you decide to adopt ODW to manager your project’s documentation:\nPre-requisite: Get familiarized with Hugo: the important sections are “Add content” and “Configure the site”. Create your first documentation website: Adapt your hugo.toml configuration file to suit your needs. Explore docs folder from this repository if you want to include a “Getting-Started” section. You are free in what structure you opt for, just keep an eye on the “time-to-read” on each page! Setup the first blog post. Maybe start with announcing the switch to ODW! Also, we recommend to exploit the discussions section to share technical updates with your community. Generate API and (optionally) unit-test docs generation Adapt the GA workflow configuration to reflect your needs (e.g. the URL to publish to) so you can deploy your site on each commit/release. Don’t forget to turn on Pages deployments from gh-pages branch in your repository settings. The Example page can help accelerate learning how to write the markdown content. Congrats! That’s all that is needed. Now expand on your content, Have fun!\n","categories":"","description":"Find out if this project is for you and your libraries!","excerpt":"Find out if this project is for you and your libraries!","ref":"/ODW-docs/docs/overview/","tags":"","title":"Overview"},{"body":" Check the Overview page before anything else. Then you may proceed to installing the dependencies and getting your site up and running.\n","categories":["Examples"],"description":"What do I need to do to try this out?","excerpt":"What do I need to do to try this out?","ref":"/ODW-docs/docs/getting-started/","tags":["docs"],"title":"Getting Started"},{"body":"Perquisites In principle, we need:\nAn OpenFOAM installation UV to manage the Python dependencies Golang and Hugo latest extended version. You can check the exact requirements in this apptainer definition file. Alternatively you can create a container out of that definition with the help of the OpenFOAM Apptainer Packaging mechanism.\nCreate a new website You can create an empty website with:\nhugo new site my-docs Since ODW is a hugo module, you can attach it to your website with:\ncd my-docs # Initialize your website as a module, username and repo name can be arbitrary hugo mod init github.com/me/my-docs # Link to ODW module hugo mod get github.com/FoamScience/ODW Make sure your docs are git-tracked:\ncd my-docs git init That’s all that needs to be done, really. To view your website:\ncd my-docs hugo server # Then visit localhost:1313 in a browser Site configuration We recommend copying this website’s configuration and put in your hugo.toml, at least as a starting point. The important bits are:\n[taxonomies] tag = \"tags\" category = \"categories\" contributor = \"contributors\" api_tag = \"api_tags\" api_namespaces = \"api_namespaces\" adr_tag = \"adr_tags\" [params.taxonomy] taxonomyCloud = [\"tags\", \"categories\", \"contributors\", \"api_tags\", \"api_namespaces\", \"adr_tags\"] taxonomyCloudTitle = [\"Tag Cloud\", \"Categories\", \"Contributors\", \"API Tags\", \"API Namespaces\", \"ADR Tags\"] taxonomyPageHeader = [\"tags\", \"categories\", \"contributors\", \"api_tags\", \"api_namespaces\", \"adr_tags\"] [markup] [markup.goldmark] [markup.goldmark.parser.attribute] block = true [markup.goldmark.renderer] unsafe = true hardWraps = true xhtml = true [markup.goldmark.renderHooks.link] enableDefault = false [markup.highlight] # See a complete list of available styles at https://xyproto.github.io/splash/docs/all.html style = \"catppuccin-mocha\" [module] [module.hugoVersion] extended = true min = \"0.140.0\" [[module.imports]] path = \"github.com/FoamScience/ODW\" disable = false You can also change the styling by adding a assets/scss/_variables_project.scss. Take a look at our variables SCSS file for ideas.\nPopulate the website with content Add content as you please (Hugo rules apply, and Docsy short-codes are available), but we recommend at least:\ncontent/ en/ _index.md # landing page about/_index.md # An \"about\" page api/_index.md # API documentation ards/_index.md # ADRs blog/_index.md # The blog section docs/_index.md # Getting started, FAQ and tutorial pages tests/_index.md # Unit tests (if you like) Each of these sections are optional, and you are free to structure the content however you see fit.\nSetup the landing page The landing (home) page is setup through content/en/_index.md. This example landing page uses Docsy’s cover and section short-codes which render like this\nTutorials-style documentation The frontmatter for the docs section is solely based on what Docsy and Hugo support. A minimal set of entries describes:\n--- title: Your first website description: A fast-paced guide to build your first documentation website with ODW categories: - Examples tags: - docs weight: 4 # This weight will control the ordering of pages on the sidebar --- To make sure this section shows up in the top (main) menu, add a content/en/docs/_index.md with the following frontmatter:\n--- title: Documentation linkTitle: Docs menu: # Add this to the main menu main: weight: 20 weight: 1 --- API and unit test documentation To generate the API and, optionally, the unit tests documentation, we need to use a ODW’s CLI.\nGet the CLI utility from your live site!\n# In one terminal cd my-docs hugo serve # keep this running # In another terminal curl -O http://localhost:1313/scripts/odw chmod +x ./odw ./odw --help You can then generate the docs:\ncd my-docs openfoam2406 # Or source any other OpenFOAM environment # DOC_DIR points to the root folder of the hugo website # CODE_SRC_DIR points to the src folder where your libraries reside # /tmp/foamcd.dbs is where the SQLITE databases are saved; # if you keep this between runs, they are used as a \"cache\" DOCS_DIR=$PWD CODE_SRC_DIR=\u003cyour/code/repo/folder\u003e \\ ./odw docs /tmp/foamcd.dbs # If you want to produce UT reports and link them to API classes: # Setting CODE_TEST_DIR will turn on unit test processing and parsing # But this also requires setting FOAM_FOAMUT DOCS_DIR=$PWD CODE_SRC_DIR=\u003cyour/code/repo/folder\u003e \\ CODE_TEST_DIR=\u003cyour/tests/folder\u003e FOAM_FOAMUT=/tmp/ut \\ ./odw docs /tmp/foamcd.dbs This will produce a tree under content/en/api for your libraries. Make sure to add a content/en/api/_index.md with the following frontmatter:\n--- title: API layout: library # This is important menu: # Add this to main menu main: weight: 20 api_tags: - library weight: 1 --- Another important task is to get the code authors right. FoamCD parses the authors from Git, so for each corresponding author, it’s recommended to put a content/en/contributors/\u003ccontibutor_alias\u003e.md. A typical frontmatter for such pages:\n--- title: Contributor's full name shortTitle: main_alias github: GithubAccount linkedin: LinkedInProfileID aliases: # Possible aliases for this contributor in git logs - alias_1 - email_1 --- The blog section The blog section is similar to docs, but lists the posts in reverse chronological order. The structure can be freely changed, but the example blog outlines a good starting point.\nRecording ADRs ","categories":["Examples"],"description":"A fast-paced guide to build your first documentation website with ODW","excerpt":"A fast-paced guide to build your first documentation website with ODW","ref":"/ODW-docs/docs/getting-started/first-docs-website/","tags":["docs"],"title":"Your first website"},{"body":" Check the Overview page before anything else. Then you may proceed to installing the dependencies and getting your site up and running.\nThis is a placeholder page. Replace it with your own content.\nText can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nEquations You can have inline math by enclosing equations in $ pairs or use inline math de \\\\(....\\\\): for example, $\\mu$.\nBlock math mode can be entered with either $$ pairs or \\\\[....\\\\]:\n$$\\sum_{i=0}^{N}\\frac{f_i(x_0)}{(x_i-1)^2}$$\nMermaid diagrams Mermaid diagrams can be defined through regular mermaid code fences, and they should switch to dark mode following the site’s preferences.\ngraph TD A[Source Code Repo] --\u003e B[Docs Generator] B --\u003e C[API Docs] B --\u003e D[Unit Test Docs] B --\u003e E[Tutorials] B --\u003e F[Blog Posts] B --\u003e G[\"Architectural Decision Records (ADRs)\"] subgraph Output Site C D E F G end A faulty mermaid graph will display as:\ngraph LR A [Random] -\u003e B[A (e)] This is the final element on the page and there should be no margin below this.\n","categories":["Examples"],"description":"A reference of how the Markdown content is formatted.","excerpt":"A reference of how the Markdown content is formatted.","ref":"/ODW-docs/docs/getting-started/example-page/","tags":["docs"],"title":"Example Page"},{"body":"","categories":"","description":"C++ API reference documentation for testlib","excerpt":"C++ API reference documentation for testlib","ref":"/ODW-docs/api/testlib/","tags":"","title":"testlib"},{"body":"","categories":["api","testlib API"],"description":"Base class mimiking a standard OpenFOAM model\nwhile having minimal dependencies but default-constructing\nmost of its members","excerpt":"Base class mimiking a standard OpenFOAM model\nwhile having minimal …","ref":"/ODW-docs/api/Foam_basicReflectedModel/","tags":"","title":"basicReflectedModel"},{"body":"","categories":["api","testlib API"],"description":"a child model mimiking original OpenFOAM child models\nand keeping an optional subModel that participates in RTS","excerpt":"a child model mimiking original OpenFOAM child models\nand keeping an …","ref":"/ODW-docs/api/Foam_child1BasicReflectedModel/","tags":"","title":"child1BasicReflectedModel"},{"body":"","categories":["api","testlib API"],"description":"a child model mimiking original OpenFOAM child models\nand keeping an optional subModel that participates in RTS","excerpt":"a child model mimiking original OpenFOAM child models\nand keeping an …","ref":"/ODW-docs/api/Foam_child2BasicReflectedModel/","tags":"","title":"child2BasicReflectedModel"},{"body":"","categories":["api","testlib API"],"description":"a child model mimiking original OpenFOAM child models\nand keeping an optional subModel that participates in RTS","excerpt":"a child model mimiking original OpenFOAM child models\nand keeping an …","ref":"/ODW-docs/api/Foam_childFullReflectedModel/","tags":"","title":"childFullReflectedModel"},{"body":"","categories":["api","testlib API"],"description":"API documentation for childOpenFOAMModel","excerpt":"API documentation for childOpenFOAMModel","ref":"/ODW-docs/api/Foam_childOpenFOAMModel/","tags":"","title":"childOpenFOAMModel"},{"body":"","categories":["api","testlib API"],"description":"Base class taking advantage of uiElements","excerpt":"Base class taking advantage of uiElements","ref":"/ODW-docs/api/Foam_fullReflectedModel/","tags":"","title":"fullReflectedModel"},{"body":"","categories":["api","testlib API"],"description":"API documentation for OpenFOAMModel","excerpt":"API documentation for OpenFOAMModel","ref":"/ODW-docs/api/Foam_OpenFOAMModel/","tags":"","title":"OpenFOAMModel"},{"body":"This section is where the “user documentation” lives - all the information users need to understand and successfully use the project should go under the /docs path.\nHow to write on this site? You can edit this page from the sidebar on the right. You can also abuse the “View page source” link to learn how to achieve certain styling. For example, how do you style this paragraph as a note? Naturally, there is an extensive documentation on how to use this project to produce stunning documentation webpages for your OpenFOAM libraries.\n","categories":"","description":"","excerpt":"This section is where the “user documentation” lives - all the …","ref":"/ODW-docs/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/blog/news/","tags":"","title":"News"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/blog/releases/","tags":"","title":"Releases"},{"body":"Version 0.1.2 is out! This version accommodates features offered by FoamCD with OpenFOAM and OpenFOAM-reflections plugins turned on. Here is a changelog of the underlying FoamCD parser:\nFoamCD 0.1.2 (2025-05-04) Feat support member type aliases parse class fields skip forward declarations in markdown generation handle enclosed types config generation reads existing configs first Fix skip forward declarations in class index pages bug with method/field access specifiers bug with reporting class children entities enclosed entities names and scopes markdown output for member fields better handling of scope-resolution notation in method/function definition FoamCD 0.1.1 (2025-04-29) Feat add ODW unit-test report -\u003e markdown file add plugin to extract information from self-reflecting OpenFOAM code tree-sitter parser forced for unit tests improved parsed docs and url pattern application overridable config entries on generation Fix update config structure + add option to skip entities repair plugin system source file handling as absolute path in compile_commmands handle relative include paths in compile_commands.json FoamCD 0.1.0 (2025-04-27) BREAKING CHANGE a non-null column in inheritance table, for\naccess_level, is now required. Feat deprecation detection specialize method docs URI attach namespaces to entities + improved mapping file -\u003e url better detection of defaulted/deleted methods contributers list from git markdown frontend to database entities basic git ops for author extraction most popular compiler attributes first implementation of a fallback tree-sitter parser static, return_type and few other new db fields update openfoam-plugin to adequetly parse RTS-features of OpenFOAM classes add openfoam RTS class fetching to db thorough function metadata extraction proper inheritance, declaration-definition links and namespace tracking first versions of openmp, openacc, and openfoam plugins plugin mechanism to add feature detectors dynamically add basic parsing and db exporting Fix prep plugins for publishing unknown cursor name signatures for class entities improve constructor parsing proper ctor/dtor signatures and (no) return types URI handling in declaration/definitionfile templating path normalization when generating markdown files improve handling of existing database logger bug in config generation update default config improve get_class_stats from codebase-wide database selections avoid circular dependency byadding common constants file detection of c++20 features detection of c++17 features detection of c++14 features detection of c++11 features Refactor prep for 1st published version + versioning parser feature detection to get rid of horrible if-else chains ","categories":"","description":"Jump-start ODW usage for documenting OpenFOAM libraries\n","excerpt":"Jump-start ODW usage for documenting OpenFOAM libraries\n","ref":"/ODW-docs/blog/2025/05/05/a-first-release/","tags":"","title":"A first release"},{"body":"Initial work on the companion website project for documenting the design and implementation\nof my PhD project (Meshless methods in CFD applications) has been completed. The project\nis in a stable state hence made available for the wide public to use. As always, all kinds of PRs are\nvery much welcome!\n","categories":"","description":"The Docsy Hugo theme lets project maintainers and contributors focus on content, not on reinventing a website infrastructure from scratch; FoamCD generates most of that content automatically for you directly from your code base!\n","excerpt":"The Docsy Hugo theme lets project maintainers and contributors focus …","ref":"/ODW-docs/blog/2025/05/05/easy-api-documentation-with-hugo-and-foamcd/","tags":"","title":"Easy API documentation with Hugo and FoamCD"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/categories/api/","tags":"","title":"Api"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/api_tags/","tags":"","title":"Api_tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/api_tags/class/","tags":"","title":"Class"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/categories/testlib-api/","tags":"","title":"Testlib API"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/adr_tags/","tags":"","title":"Adr_tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/adr_tags/applications/","tags":"","title":"Applications"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/adr_tags/backend/","tags":"","title":"Backend"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/adr_tags/ui/ux/","tags":"","title":"Ui/Ux"},{"body":"Context and Problem Statement We want to record architectural decisions made in this project independent whether decisions concern the architecture (“architectural decision record”), the code, or other fields.\nWhich format and structure should these records follow?\nConsidered Options MADR 4.0.0 – The Markdown Architectural Decision Records Michael Nygard’s template – The first incarnation of the term “ADR” Sustainable Architectural Decisions – The Y-Statements Formless – No conventions for file format and structure Decision Outcome Chosen option: A slightly Modified “MADR 4.0.0”, because\nImplicit assumptions should be made explicit.\nDesign documentation is important to enable people understanding the decisions later on.\nSee also “A rational design process: How and why to fake it”. MADR allows for structured capturing of any decision. The MADR format fits within our documentation workflow effortlessly. The format of an ADR markdown file must follow the following format:\n--- layout: adr title: ADR Title related: - Related ADR Title status: enforced # proposed, rejected, deprecated, superseded, or under-review date: 2024-11-01 decision_makers: - elwardi adr_tags: - backend - ui/ux - applications --- ## Context and Problem Statement Describe the context and problem statement in two-three sentences, ending with a question. ## Decision Drivers (optional*) - Decision driver 1 (concern, force) - Decision driver 2 (concern, force) ## Considered Options - Option 1 - Option 2 ## Decision Outcome Chosen option: {option}, because {reasons irt. decision drivers} ### Consequences (optional*) - Positive, improves this and that - Neutral, changes this and that but has no significant effects - Negative, affects this and that ### Confirmation (optional*) How to confirm compliance with decision. ## More information (optional*) Any more information clarifying components of the decision. ","categories":"","description":"","excerpt":"Context and Problem Statement We want to record architectural …","ref":"/ODW-docs/adr/0000-use-markdown-architectural-decision-records/","tags":"","title":"Use Markdown Architectural Decision Records"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/%23basicreflectiontests/","tags":"","title":"#BasicReflectionTests"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/%23fullreflectiontests/","tags":"","title":"#FullReflectionTests"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/%23noreflectiontests/","tags":"","title":"#NoReflectionTests"},{"body":" What is ODW? OpenFOAM-Docs-Webpages (ODW) is a Hugo module leveraging the great Docsy Hugo theme and FoamCD to generate stunning and actually useful documentation pages which stay up-to-date with minimal effort.\nIt’s for the lazy lots of us who write OpenFOAM code frequently and want to document it in a way that’s actually decent to look at and browse. Reading source code files is still better though…\nThe core idea is to eventually put emphasis, not only the C++ features a code base leverages, but on more important Domain-Specific Language features, especially for OpenFOAM, MPI and friends. Right now, the project is in its first phases. Any PRs are appreciated. And don’t hesitate to report issues you may encounter!\n","categories":"","description":"","excerpt":" What is ODW? OpenFOAM-Docs-Webpages (ODW) is a Hugo module leveraging …","ref":"/ODW-docs/about/","tags":"","title":"About ODW"},{"body":"We abuse ADRs to record any activity on the repo, may it be related to architecture, design, implementation or any other aspect that affects the project’s future. ADRs are categorized by their status as follows:\nProposed ADR: written out, and was investigated Under-review ADR: reviewing viability of acceptance Enforced ADR: accepted as viable, and set in effect Rejected ADR: dropped out Deprecated ADR: was in effect, but now preparing to retire Superseded ADR: was in effect, but was replaced by another decision ","categories":"","description":"","excerpt":"We abuse ADRs to record any activity on the repo, may it be related to …","ref":"/ODW-docs/adr/","tags":["backend","ui","applications"],"title":"ADRs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/api_namespaces/","tags":"","title":"Api_namespaces"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/applications/","tags":"","title":"Applications"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/backend/","tags":"","title":"Backend"},{"body":"This is the blog section. It has to categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has to categories: News and Releases. …","ref":"/ODW-docs/blog/","tags":"","title":"Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/cavity/","tags":"","title":"Cavity"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/contributors/","tags":"","title":"Contributors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/docs/","tags":"","title":"Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/categories/examples/","tags":"","title":"Examples"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/api_tags/library/","tags":"","title":"Library"},{"body":"This means the documentation software could not infer the contributor from the header and source files. This is mostly fine for external libraries but your code shouldn’t be missing authors…\nCurrently, the only mode of inferring authors is through Git author lookups of specific ranges of lines. If you are documenting a project that is not managed by Git, you can either:\nInitialize Git, then commit everything if you are the sole developer of your project. Or, Open a documentation issue, mentioning your specific use case. If you build the documentation locally, you may get missing authors for lines that are not committed yet!\n","categories":"","description":"","excerpt":"This means the documentation software could not infer the contributor …","ref":"/ODW-docs/contributors/__missing__/","tags":"","title":"Missing"},{"body":"Main developer of this toolkit: A CFD enthusiast with passion for software development.\n","categories":"","description":"","excerpt":"Main developer of this toolkit: A CFD enthusiast with passion for …","ref":"/ODW-docs/contributors/elwardi/","tags":"","title":"Mohammed Elwardi Fadeli"},{"body":" Your template for documenting OpenFOAM libraries Effortless, versioned docs for your OpenFOAM code—generated in one command.\nGet Started Use as Hugo module ODW (OpenFOAM-Docs-Webpages) is a lightweight Hugo module designed to create clean, versioned documentation websites for OpenFOAM libraries.\nWith a single command call, it can generate up-to-date API docs and unit test coverage — automatically synced with your codebase.\nHugo We use Hugo to instantly build a full-featured documentation site—ready for GitHub Pages—with support for blogs, ADRs, API docs, unit tests, and tutorials.\nWrite in Markdown (with LaTeX + Mermaid support) for a smooth, developer-friendly experience.\nRead more\nFoamCD API docs are auto-generated with FoamCD, a modern tool built to expose both C++ standard features and OpenFOAM-specific DSLs (with a few more DSL features from other frameworks).\nIt’s modular too—you can swap it out easily. We’ve hopped through Doxygen, Hyde, and Standardese, but FoamCD fit the ODW vision best.\nRead more\nFoamUT Unit test docs are auto-generated and linked to related API classes—if you write tests using foamUT (Catch2).\nThis step is optional, but we strongly recommend adding unit tests to get the most out of the documentation pipeline.\nRead more\nAPI and Unit tests docs for the lazy As a modern alternative to Doxygen, FoamCD generates API docs as Markdown—highlighting C++ features and OpenFOAM-specific DSL patterns. It preserves custom content between builds and uses cached index databases to speed up and enrich doc generation, automatically linking classes to their unit tests.\nFoamCD relies primarily on libclang to parse the AST—so anything Clang supports should work out of the box. While inline comments are parsed as docs, we recommend keeping important notes in dedicated Markdown files (with full LaTeX and Mermaid support).\nWiki-like docs The same Markdown system powers custom pages like “Getting Started” or “FAQ”, built from your own content. You get full access to all Hugo and Docsy shortcodes and features for flexible, styled documentation.\nA Blog and an ADR backlog I like to track project progress through a DevLog—a great way to share evolution, insights, and lessons learned. Publishing it not only helps others, but also improves project visibility through more searchable, detailed content.\nDecision Records are managed as a dedicated content type, making it easier for new contributors to onboard while clearly conveying the project’s intentions and design philosophy.\n","categories":"","description":"","excerpt":" Your template for documenting OpenFOAM libraries Effortless, …","ref":"/ODW-docs/","tags":"","title":"ODW"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tests/reflections/","tags":"","title":"reflections tests"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/serial/","tags":"","title":"Serial"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/ODW-docs/tags/ui/","tags":"","title":"Ui"},{"body":"This page hosts documentation for all unit tests we run on each commit. Only serial test results are reported for now!\n","categories":"","description":"","excerpt":"This page hosts documentation for all unit tests we run on each …","ref":"/ODW-docs/tests/","tags":"","title":"Unit Tests"},{"body":" Note: The unit tests pages are automatically generated from the test reports. Some important points to mention:\nThe random number generator is seeded with the same seed for parallel/serial runs for the same test case. Number of passing tests is the “effective” one (including the ones that fail but are expected to fail)\". Number of failing tests is the “effective” one (only the ones that fail and are not expected to fail)\". Serial unit tests for basicReflection in reflections library on [cavity] case Tests were performed using Catch2 version 3.6.0 (rng-seed: 3975461408) with the following filters: [serial] [cavity] [#basicReflectionTests].\n5 Passing test cases (20 expressions), 0 Failing test cases (0 expressions).\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes Defined in basicReflectionTests.C#19\nWith expressions:\nFrom file basicReflectionTests.C#31.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes compiler defaults are reported for non constexpr default-constructible types From file basicReflectionTests.C#32.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes compiler defaults are reported for non constexpr default-constructible types From file basicReflectionTests.C#36.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes empty values are reported for non constexpr non default-constructible types From file basicReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes onDemand tag and defaults underlying type are reported for pointer types From file basicReflectionTests.C#43.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes onDemand tag and defaults underlying type are reported for pointer types From file basicReflectionTests.C#50.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes RTS options are reported for a base model class From file basicReflectionTests.C#51.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes RTS options are reported for a base model class From file basicReflectionTests.C#53.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes RTS options are reported for a base model class From file basicReflectionTests.C#54.\nBelonging to the test section scoped as:\nUnconfigured refletion supports basic reflectable OpenFOAM classes both in constructive and documentation modes RTS options are reported for a base model class Configured refletion supports basic reflectable abstract RTS OpenFOAM classes both in documentation mode Defined in basicReflectionTests.C#60\nWith expressions:\nFrom file basicReflectionTests.C#71.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable abstract RTS OpenFOAM classes both in documentation mode child models report their concrete type as value in selection keyword From file basicReflectionTests.C#81.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable abstract RTS OpenFOAM classes both in documentation mode child models report reflected members of their base alongside their own From file basicReflectionTests.C#82.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable abstract RTS OpenFOAM classes both in documentation mode child models report reflected members of their base alongside their own Configured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - false Defined in basicReflectionTests.C#86\nWith expressions:\nFrom file basicReflectionTests.C#98.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - false From file basicReflectionTests.C#104.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - false Configured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - true Defined in basicReflectionTests.C#86\nWith expressions:\nFrom file basicReflectionTests.C#98.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - true From file basicReflectionTests.C#104.\nBelonging to the test section scoped as:\nConfigured refletion supports basic reflectable concrete RTS OpenFOAM classes both in documentation mode - true Unconfigured reflection system is able to build concrete objects without explicit headers inclusion Defined in basicReflectionTests.C#107\nWith expressions:\nFrom file basicReflectionTests.C#124.\nBelonging to the test section scoped as:\nUnconfigured reflection system is able to build concrete objects without explicit headers inclusion typeName matches the concrete type From file basicReflectionTests.C#133.\nBelonging to the test section scoped as:\nUnconfigured reflection system is able to build concrete objects without explicit headers inclusion default-constructed members do not match values in skeleton From file basicReflectionTests.C#124.\nBelonging to the test section scoped as:\nUnconfigured reflection system is able to build concrete objects without explicit headers inclusion typeName matches the concrete type From file basicReflectionTests.C#133.\nBelonging to the test section scoped as:\nUnconfigured reflection system is able to build concrete objects without explicit headers inclusion default-constructed members do not match values in skeleton ","categories":"","description":"","excerpt":" Note: The unit tests pages are automatically generated from the test …","ref":"/ODW-docs/tests/reflections/basicreflectiontests/","tags":["#basicReflectionTests","serial","cavity"],"title":"Unit tests for reflections - basicReflection"},{"body":" Note: The unit tests pages are automatically generated from the test reports. Some important points to mention:\nThe random number generator is seeded with the same seed for parallel/serial runs for the same test case. Number of passing tests is the “effective” one (including the ones that fail but are expected to fail)\". Number of failing tests is the “effective” one (only the ones that fail and are not expected to fail)\". Serial unit tests for fullReflection in reflections library on [cavity] case Tests were performed using Catch2 version 3.6.0 (rng-seed: 3732512326) with the following filters: [serial] [cavity] [#fullReflectionTests].\n2 Passing test cases (14 expressions), 0 Failing test cases (0 expressions).\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes Defined in fullReflectionTests.C#19\nWith expressions:\nFrom file fullReflectionTests.C#31.\nBelonging to the test section scoped as:\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report their descriptions From file fullReflectionTests.C#35.\nBelonging to the test section scoped as:\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report min if available From file fullReflectionTests.C#36.\nBelonging to the test section scoped as:\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report min if available From file fullReflectionTests.C#40.\nBelonging to the test section scoped as:\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report max if available From file fullReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report max if available Configured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes Defined in fullReflectionTests.C#46\nWith expressions:\nFrom file fullReflectionTests.C#66.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#67.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#68.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#71.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#74.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#75.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report the default-constructed value From file fullReflectionTests.C#82.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report changed values from defaults From file fullReflectionTests.C#83.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes uiElement members report changed values from defaults From file fullReflectionTests.C#91.\nBelonging to the test section scoped as:\nConfigured refletion supports fully reflectable OpenFOAM classes both in constructive and documentation modes child models report uiElement members of their own and of their base ","categories":"","description":"","excerpt":" Note: The unit tests pages are automatically generated from the test …","ref":"/ODW-docs/tests/reflections/fullreflectiontests/","tags":["cavity","serial","#fullReflectionTests"],"title":"Unit tests for reflections - fullReflection"},{"body":" Note: The unit tests pages are automatically generated from the test reports. Some important points to mention:\nThe random number generator is seeded with the same seed for parallel/serial runs for the same test case. Number of passing tests is the “effective” one (including the ones that fail but are expected to fail)\". Number of failing tests is the “effective” one (only the ones that fail and are not expected to fail)\". Serial unit tests for noReflection in reflections library on [cavity] case Tests were performed using Catch2 version 3.6.0 (rng-seed: 3240269384) with the following filters: [serial] [cavity] [#noReflectionTests].\n6 Passing test cases (42 expressions), 0 Failing test cases (0 expressions).\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 Defined in noReflectionTests.C#18\nWith expressions:\nFrom file noReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#42.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#46.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 empty values are reported for non constexpr non default-constructible types From file noReflectionTests.C#51.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#53.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#65.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 RTS options are reported for a base model class From file noReflectionTests.C#66.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 RTS options are reported for a base model class From file noReflectionTests.C#68.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 RTS options are reported for a base model class From file noReflectionTests.C#69.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector,0 RTS options are reported for a base model class Unconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 Defined in noReflectionTests.C#18\nWith expressions:\nFrom file noReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#42.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#46.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 empty values are reported for non constexpr non default-constructible types From file noReflectionTests.C#51.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#53.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#65.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 RTS options are reported for a base model class From file noReflectionTests.C#66.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 RTS options are reported for a base model class From file noReflectionTests.C#68.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 RTS options are reported for a base model class From file noReflectionTests.C#69.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector, 1 RTS options are reported for a base model class Unconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 Defined in noReflectionTests.C#18\nWith expressions:\nFrom file noReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#42.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#46.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 empty values are reported for non constexpr non default-constructible types From file noReflectionTests.C#51.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#53.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#65.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 RTS options are reported for a base model class From file noReflectionTests.C#66.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 RTS options are reported for a base model class From file noReflectionTests.C#68.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 RTS options are reported for a base model class From file noReflectionTests.C#69.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor,0 RTS options are reported for a base model class Unconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 Defined in noReflectionTests.C#18\nWith expressions:\nFrom file noReflectionTests.C#41.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#42.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 compiler defaults are reported for non constexpr default-constructible types From file noReflectionTests.C#46.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 empty values are reported for non constexpr non default-constructible types From file noReflectionTests.C#51.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#53.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 onDemand tag and defaults underlying type are reported for pointer types From file noReflectionTests.C#65.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 RTS options are reported for a base model class From file noReflectionTests.C#66.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 RTS options are reported for a base model class From file noReflectionTests.C#68.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 RTS options are reported for a base model class From file noReflectionTests.C#69.\nBelonging to the test section scoped as:\nUnconfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor, 1 RTS options are reported for a base model class Configured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector Defined in noReflectionTests.C#75\nWith expressions:\nFrom file noReflectionTests.C#99.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector child models report their concrete type as value in selection keyword From file noReflectionTests.C#109.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector child models report reflected members of their base alongside their own From file noReflectionTests.C#110.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - vector child models report reflected members of their base alongside their own Configured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor Defined in noReflectionTests.C#75\nWith expressions:\nFrom file noReflectionTests.C#99.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor child models report their concrete type as value in selection keyword From file noReflectionTests.C#109.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor child models report reflected members of their base alongside their own From file noReflectionTests.C#110.\nBelonging to the test section scoped as:\nConfigured Refletion supports original OpenFOAM classes through seamless wrapping both in constructive and documentation modes, penetrating pointer types. - tensor child models report reflected members of their base alongside their own ","categories":"","description":"","excerpt":" Note: The unit tests pages are automatically generated from the test …","ref":"/ODW-docs/tests/reflections/noreflectiontests/","tags":["cavity","#noReflectionTests","serial"],"title":"Unit tests for reflections - noReflection"}]